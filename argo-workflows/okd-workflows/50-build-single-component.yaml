kind: ClusterWorkflowTemplate
apiVersion: argoproj.io/v1alpha1
metadata:
  name: build-okd-component
spec:
  entrypoint: entrypoint
  arguments:
    parameters:
      - name: architectures
        default: amd64
      - name: cleanup
        default: "true"
      - name: component
        default: ""
      - name: rebuild-base
        default: "true"
  templates:
    - name: entrypoint
      steps:
        - - name: cleanup
            when: "{{workflow.parameters.cleanup}}==true"
            template: cleanup
        - - name: initial
            template: initial
            when: "{{workflow.parameters.rebuild-base}}==true"
        - - name: batches
            template: batches
    - name: build-multiarch-workflow
      inputs:
        parameters:
          - name: build-config-name
      retryStrategy:
        backoff:
          duration: 1m
          factor: "2"
          maxDuration: 60m
        limit: "3"
        retryPolicy: Always
      steps:
        - - name: generate-memoization-key
            arguments:
              parameters:
                - name: build-config-name
                  value: "{{inputs.parameters.build-config-name}}"
            template: prepare-memoization-key
        - - name: multiarch-build
            template: multiarch-builds
            arguments:
              parameters:
                - name: build-config-name
                  value: "{{inputs.parameters.build-config-name}}"
                - name: memoization-key
                  value: "{{steps.generate-memoization-key.outputs.parameters.memoization-key}}"
    - name: batches
      failFast: true
      parallelism: 1
      steps:
        - - name: batch-01
            template: build-multiarch-workflow
            arguments:
              parameters:
                - name: build-config-name
                  value: "{{workflow.parameters.component}}"
                - name: architectures
                  value: "{{workflow.parameters.architectures}}"
    - name: cleanup
      steps:
        - - name: delete-release-imagestream
            continueOn:
              failed: true
              error: true
            inline:
              resource:
                action: delete
                manifest: |
                  apiVersion: image.openshift.io/v1
                  kind: ImageStream
                  metadata:
                    name: "release"
        - - name: delete-memoization-configmap
            template: delete-memoization-configmap
        - - name: create-release-imagestream
            inline:
              resource:
                action: create
                manifest: |
                  apiVersion: image.openshift.io/v1
                  kind: ImageStream
                  metadata:
                    name: release
                  spec:
                    lookupPolicy:
                      local: true
                    tags:
                      - name: kuryr-cni
                        from:
                          kind: DockerImage
                          name: registry.access.redhat.com/ubi9-minimal:9.0.0
                        referencePolicy:
                          type: Source
                        importPolicy:
                          importMode: PreserveOriginal
                      - name: kuryr-controller
                        from:
                          kind: DockerImage
                          name: registry.access.redhat.com/ubi9-minimal:9.0.0
                        referencePolicy:
                          type: Source
                        importPolicy:
                          importMode: PreserveOriginal
                      - name: powervs-block-csi-driver-operator
                        from:
                          kind: DockerImage
                          name: registry.access.redhat.com/ubi9-minimal:9.0.0
                        referencePolicy:
                          type: Source
                        importPolicy:
                          importMode: PreserveOriginal
                      - name: powervs-block-csi-driver
                        from:
                          kind: DockerImage
                          name: registry.access.redhat.com/ubi9-minimal:9.0.0
                        referencePolicy:
                          type: Source
                        importPolicy:
                          importMode: PreserveOriginal
                      - name: ibmcloud-cluster-api-controllers
                        from:
                          kind: DockerImage
                          name: registry.access.redhat.com/ubi9-minimal:9.0.0
                        referencePolicy:
                          type: Source
                        importPolicy:
                          importMode: PreserveOriginal
                      - name: cluster-baremetal-operator
                        from:
                          kind: DockerImage
                          name: registry.access.redhat.com/ubi9-minimal:9.0.0
                        referencePolicy:
                          type: Source
                        importPolicy:
                          importMode: PreserveOriginal
                      - name: hypershift
                        from:
                          kind: DockerImage
                          name: registry.access.redhat.com/ubi9-minimal:9.0.0
                        referencePolicy:
                          type: Source
                        importPolicy:
                          importMode: PreserveOriginal
    - name: multiarch-builds
      inputs:
        parameters:
          - name: build-config-name
          - name: memoization-key
      memoize:
        key: "{{inputs.parameters.memoization-key}}"
        maxAge: "6h"
        cache:
          configMap:
            name: build-okd-component
      resource:
        action: create
        successCondition: status.phase == Succeeded
        failureCondition: status.phase in (Failed, Error)
        setOwnerReference: true
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Workflow
          metadata:
            generateName: {{inputs.parameters.build-config-name}}-wf-
          spec:
            arguments:
              parameters:
              - name: build-config-name
                value: "{{inputs.parameters.build-config-name}}"
              - name: architectures
                value: "{{workflow.parameters.architectures}}"
            workflowTemplateRef:
              name: build-multiarch-image
              clusterScope: true
    - name: prepare-memoization-key
      volumes:
        - name: tmp
          emptyDir: {}
      inputs:
        parameters:
          - name: build-config-name
      outputs:
        parameters:
          - name: memoization-params
            valueFrom:
              path: /tmp/volume/memoization-params
          - name: memoization-key
            valueFrom:
              path: /tmp/volume/memoization-key
      containerSet:
        containers:
          - name: prepare-memoization-params
            image: image-registry.openshift-image-registry.svc:5000/openshift/cli
            command: [bash, -c]
            args:
              - |
                set -ex
                echo "Preparing memoization params"
                git_uri=$(oc get bc {{inputs.parameters.build-config-name}} -o jsonpath='{.spec.source.git.uri}')
                git_revision=$(oc get bc {{inputs.parameters.build-config-name}} -o jsonpath='{.spec.source.git.ref}')
                echo "git_uri=\"$git_uri\"" >> /tmp/volume/memoization-params
                echo "git_revision=\"$git_revision\"" >> /tmp/volume/memoization-params
                echo "name=\"{{inputs.parameters.build-config-name}}\"" >> /tmp/volume/memoization-params
            volumeMounts:
              - name: tmp
                mountPath: /tmp/volume
          - name: main
            # this is on docker hub
            image: alpine/git
            command: [sh, -c]
            args:
              - |
                set -exo pipefail
                echo "Getting git revision sha"
                . /tmp/volume/memoization-params
                if [ -z "${git_uri}" ] || [ -z "${git_revision}" ]; then
                  # TODO: this is for builds not using a git repo as source. For example, builds depending on previously
                  # built images should use another strategy to define the memoization key
                  echo "${name}-$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)-$(cat /proc/sys/kernel/random/uuid)" > /tmp/volume/memoization-key
                  exit 0
                fi
                git_revision_sha="$(git ls-remote ${git_uri} ${git_revision} | cut -f1)" 
                echo "git_revision_sha=\"$git_revision_sha\"" >> /tmp/volume/memoization-params
                key="${name}-${git_revision_sha}"
                echo "${key}" > /tmp/volume/memoization-key
            volumeMounts:
              - name: tmp
                mountPath: /tmp/volume
            dependencies:
              - prepare-memoization-params
    - name: delete-memoization-configmap
      resource:
        action: delete
        manifest: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: build-okd-component
            namespace: argo-workflows
            # TODO: is there a way for this configmap to land in the same namespace as the workflow?
    - name: initial
      failFast: true
      parallelism: 1
      steps:
        - - name: prepare-build-images
            template: build-multiarch-workflow
            arguments:
                parameters:
                  - name: build-config-name
                    value: "{{item}}"
                  - name: architectures
                    value: "{{workflow.parameters.architectures}}"
            withItems:
              - builder
              - forked-dockerfiles
              - base
              - cli